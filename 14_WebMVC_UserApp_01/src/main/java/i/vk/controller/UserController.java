package i.vk.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import i.vk.entity.LoginSource;
import i.vk.entity.User;
import i.vk.serviceimpl.LoginServiceImpl;
import i.vk.serviceimpl.UserServiceImpl;
import i.vk.util.EmailService;
import i.vk.util.PasswordGenerator;
import jakarta.mail.MessagingException;
import jakarta.validation.Valid;
import jakarta.websocket.server.PathParam;

@Controller
public class UserController {
	@Autowired
	private LoginServiceImpl loginService;
	@Autowired
	private PasswordGenerator pwdGenerator;
	@Autowired
	private EmailService emailService;
	@Autowired
	private UserServiceImpl service;

	// Method to open user form
	@GetMapping("/")
	public String loadFrom(Model model) {
		// Logic to load the form page
		User user = new User();
		model.addAttribute("user", user);
		return "index";
	}

	@PostMapping("/createuser")
	public String handleSubmit(@Valid @ModelAttribute User user, BindingResult result, Model model) {

		if (result.hasErrors()) {
			return "index";
		}

		boolean saveUser = service.saveUser(user);

		if (saveUser) {
			model.addAttribute("res", "User Record has been saved in the table");
			String passcode = pwdGenerator.generatePassword(user.getEmail(), user.getName());
			LoginSource login = new LoginSource();
			login.setUserId(user.getEmail());
			login.setPassword(passcode);
			loginService.saveRecord(login);
			String body = "<html>"
				    + "<head>"
				    + "<style>"
				    + "  * { margin: 0; padding: 0; box-sizing: border-box; }"
				    + "  body { font-family: 'Roboto', sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; padding: 20px; }"
				    + "  .container { width: 100%; max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); text-align: center; }"
				    + "  .alert { background-color: #28a745; color: white; padding: 10px 15px; border-radius: 5px; margin-bottom: 20px; }"
				    + "  .alert h2 { margin: 0; font-size: 20px; font-weight: bold; }"
				    + "  .card { background-color: #f9f9f9; padding: 15px; border-radius: 8px; margin-bottom: 20px; text-align: left; }"
				    + "  .card p { font-size: 16px; margin-bottom: 10px; }"
				    + "  .card strong { color: #333; font-weight: bold; }"
				    + "  .footer { font-size: 14px; color: #888; margin-top: 30px; }"
				    + "  .footer small { color: #aaa; }"
				    + "  .text-muted { color: #6c757d; font-size: 14px; margin-bottom: 15px; }"
				    + "  .highlight { color: #dc3545; font-size: 12px; font-style: italic; }"
				    + "  .credentials { font-size: 16px; font-weight: bold; margin-top: 15px; padding: 10px; background-color: #f0f8ff; border-radius: 8px; }"
				    + "  @media screen and (max-width: 600px) {"
				    + "    .container { padding: 15px; }"
				    + "    .alert h2 { font-size: 18px; }"
				    + "    .card p { font-size: 14px; }"
				    + "  }"
				    + "</style>"
				    + "</head>"
				    + "<body>"
				    + "<div class='container'>"
				    + "  <div class='alert'>"
				    + "    <h2>Account Created Successfully!</h2>"
				    + "  </div>"
				    + "  <div class='card'>"
				    + "    <p>Welcome <strong>" + user.getName() + "</strong>!</p>"
				    + "    <p>Your account has been created successfully. Below are your login credentials for accessing VK Virtual Services:</p>"
				    + "    <div class='credentials'>"
				    + "      <p><strong>User ID:</strong> " + user.getEmail() + "</p>"
				    + "      <p><strong>Password:</strong> " + passcode + "</p>"
				    + "    </div>"
				    + "    <p>We recommend you keep these credentials safe. If you have any questions or need assistance, please reach out to our support team.</p>"
				    + "  </div>"
				    + "  <p class='text-muted'>Thanks and Regards,</p>"
				    + "  <p><strong>Vamsi Krishna Pathallapalli</strong></p>"
				    + "  <p class='highlight'>Do not reply to this email. This is an automated message generated by our system.</p>"
				    + "  <footer class='footer'>"
				    + "    <small>&copy; 2024 VK Virtual Services. All rights reserved.</small>"
				    + "  </footer>"
				    + "</div>"
				    + "</body>"
				    + "</html>";


			try {
				emailService.sendEmail(user.getEmail(), "User Account Created [ Dummy Mail ]", body);
			} catch (MessagingException e) {
				model.addAttribute("res", "Error while sending email: " + e.getMessage());
				e.printStackTrace();
			}

		} else {
			model.addAttribute("res", "User Details are not captured. Please check once.");
		}

		model.addAttribute("user", new User());
		return "index";
	}

	// Method to view existing users

	@GetMapping("/showusers")
	public String getUsers(Model model) {
	    List<User> users = service.getAllUsers();
	    model.addAttribute("users", users);
	    return "users";
	}


	@GetMapping("/edituser/{id}")
	public String editUser(@PathVariable("id") Integer id, Model model) {
		// Edit transaction
		User editUser = service.editUser(id);
		model.addAttribute("user", editUser);
		return "edituser";
	}

	@PostMapping("/update")
	public String updateUserById(@Valid @ModelAttribute User user, BindingResult result, Model model) {
		if (result.hasErrors()) {
			return "edituser";
		}
		boolean saveUserStatus = service.saveUser(user);
		if (saveUserStatus) {
			model.addAttribute("res", "User Data Updated");
			return "edituser";
		}
		model.addAttribute("res", "User Data not Updated");
		return "edituser";
	}

	@GetMapping("/deleteuser/{id}")
	public String deleteUser(@PathParam("id") Integer id, Model model) {
		service.deleteUser(id);
		model.addAttribute("res", "User Deleted");
		List<User> users = service.getAllUsers();
		model.addAttribute("users", users);
		return "users";
	}

}
