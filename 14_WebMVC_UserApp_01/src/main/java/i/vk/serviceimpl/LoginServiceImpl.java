package i.vk.serviceimpl;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import i.vk.entity.LoginSource;
import i.vk.iservice.ILoginService;
import i.vk.repo.LoginRepository;
import i.vk.util.EmailService;
import i.vk.util.OtpSender;
import jakarta.mail.MessagingException;

@Service
public class LoginServiceImpl implements ILoginService {
	@Autowired
	private LoginRepository loginService;
	@Autowired
	private EmailService emailService;

	@Override
	public int loginValidation(LoginSource login) {
		Optional<LoginSource> byId = loginService.findById(login.getUserId());
		if (byId.isPresent()) {
			if(byId.get().getUserId().equals(login.getUserId())) {
				if(byId.get().getPassword().equals(login.getPassword())) {
					if(byId.get().getIsPasswordUpdated()==0) {
						return 1; // say that user login request validated
					}else {
						return 2; // Indicates that need to update the password
					}
				}
				else {
					return 3; // Indicates that user password is invalid or incorrect
				}
			}else {
				return 4; // Indicates that user id is not found
			}
		}
		return 0;  // Indicates that validation failure
	}

	@Override
	public boolean updatePassword(String email, String password) {
		Optional<LoginSource> byId = loginService.findById(email);
		if (byId.isPresent()) {
			LoginSource user = byId.get();
			user.setPassword(password);
			user.setIsPasswordUpdated(0);
			loginService.save(user);
			return true;
		}
		return false;
	}

	@Override
	public boolean saveRecord(LoginSource login) {
		LoginSource save = loginService.save(login);
		if (save.getUserId() != null && save.getPassword() != null) {
			return true;
		}
		return false;
	}

	@Override
	public boolean checkId(String email) {
		boolean existsById = loginService.existsById(email);
		if (existsById) {
			return true;
		}
		return false;
	}

	@Override
	public int saveOtp(String email) {
		Optional<LoginSource> byId = loginService.findById(email);
		if (byId.isPresent()) {
			LoginSource user = byId.get();
			OtpSender otpService = new OtpSender();
			int otp = otpService.generateOTP();
			user.setOTP(otp);
			loginService.save(user);
			return otp;
		}
		throw new IllegalArgumentException("User not found for email: " + email);
	}

	@Override
	public void SendOtp(String email, int otp) {
		String body = "<html>" + "<head>" + "<style>" + "  * { margin: 0; padding: 0; box-sizing: border-box; }"
				+ "  body { font-family: 'Roboto', sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; padding: 20px; }"
				+ "  .container { width: 100%; max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); text-align: center; }"
				+ "  .alert { background-color: #ff9800; color: white; padding: 10px 15px; border-radius: 5px; margin-bottom: 20px; }"
				+ "  .alert h2 { margin: 0; font-size: 20px; font-weight: bold; }"
				+ "  .card { background-color: #f9f9f9; padding: 15px; border-radius: 8px; margin-bottom: 20px; text-align: left; }"
				+ "  .card p { font-size: 16px; margin-bottom: 10px; }"
				+ "  .card strong { color: #333; font-weight: bold; }"
				+ "  .footer { font-size: 14px; color: #888; margin-top: 30px; }" + "  .footer small { color: #aaa; }"
				+ "  .text-muted { color: #6c757d; font-size: 14px; margin-bottom: 15px; }"
				+ "  .highlight { color: #dc3545; font-size: 12px; font-style: italic; }"
				+ "  .otp { font-size: 16px; font-weight: bold; margin-top: 15px; padding: 10px; background-color: #f0f8ff; border-radius: 8px; }"
				+ "  @media screen and (max-width: 600px) {" + "    .container { padding: 15px; }"
				+ "    .alert h2 { font-size: 18px; }" + "    .card p { font-size: 14px; }" + "  }" + "</style>"
				+ "</head>" + "<body>" + "<div class='container'>" + "  <div class='alert'>"
				+ "    <h2>Password Reset Request</h2>" + "  </div>" + "  <div class='card'>" + "    <p>Dear <strong>"
				+ email + "</strong>,</p>"
				+ "    <p>We received a request to reset your password for your account associated with the email address <strong>"
				+ email + "</strong>.</p>" + "    <p>Please use the following OTP to reset your password:</p>"
				+ "    <div class='otp'>" + "      <p><strong>OTP:</strong> " + otp + "</p>" + "    </div>"
				+ "    <p>If you did not request a password reset, please ignore this email. The OTP will expire in 15 minutes.</p>"
				+ "  </div>" + "  <p class='text-muted'>Thanks and Regards,</p>"
				+ "  <p><strong>Vamsi Krishna Pathallapalli</strong></p>"
				+ "  <p class='highlight'>Do not reply to this email. This is an automated message generated by our system.</p>"
				+ "  <footer class='footer'>"
				+ "    <small>&copy; 2024 VK Virtual Services. All rights reserved.</small>" + "  </footer>" + "</div>"
				+ "</body>" + "</html>";

		try {
			emailService.sendEmail(email, "Reset Password", body);
		} catch (MessagingException e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean validateOtp(String email, int otp) {
	    Optional<LoginSource> byId = loginService.findById(email);
	    if (byId.isPresent()) {
	        LoginSource user = byId.get();
	        return user.getOTP() == otp;
	    }
	    return false;
	}

}